name: Build and Release Flight Alert Multi-Platform

on:
  push:
    tags:
      - 'v*' # Run when tag is pushed starting with 'v'
  workflow_dispatch: # Allow manual triggering

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.8']
        include:
          - os: windows-latest
            gui-name: FlightAlert.exe
            console-name: FlightAlert-Console.exe
            data-separator: ";"
            test-cmd: |
              if ((Test-Path "dist/FlightAlert.exe") -and (Test-Path "dist/FlightAlert-Console.exe")) {
                Write-Host "✓ Executables built successfully"
              } else {
                Write-Error "✗ One or more executables not found"
                exit 1
              }
            copy-cmd: Copy-Item "config.json" "dist/"
            
          - os: ubuntu-latest
            gui-name: FlightAlert
            console-name: FlightAlert-Console
            data-separator: ":"
            test-cmd: |
              if [ -f "dist/FlightAlert" ] && [ -f "dist/FlightAlert-Console" ]; then
                echo "✓ Executables built successfully"
              else
                echo "✗ One or more executables not found"
                exit 1
              fi
            copy-cmd: cp "config.json" "dist/"

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y python3-tk python3-dev libgtk-3-dev
    
    - name: Install Python dependencies
      run: |
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Build GUI Application with PyInstaller
      run: |
        pyinstaller --name "${{ matrix.gui-name }}" flight_alert_gui.py --windowed --add-data "config.json${{ matrix.data-separator }}." --clean ${{ runner.os == 'Linux' && '--argv-emulation' || '' }}
    
    - name: Build Console Application with PyInstaller  
      run: |
        pyinstaller --name "${{ matrix.console-name }}" flight_alert.py --console --add-data "config.json${{ matrix.data-separator }}." --clean ${{ runner.os == 'Linux' && '--argv-emulation' || '' }}
    
    - name: Test builds
      run: ${{ matrix.test-cmd }}
   
    - name: Copy config file to dist
      run: ${{ matrix.copy-cmd }}
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: binaries
        path: |
          dist/${{ matrix.gui-name }}
          dist/${{ matrix.console-name }}
          dist/config.json
    
    - name: Create Release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/${{ matrix.gui-name }}
          dist/${{ matrix.console-name }}
          dist/config.json

        draft: false
        prerelease: false
        body: |
            ## windows
            - `FlightAlert.exe` - GUI application
            - `FlightAlert-Console.exe` - Console application
            ## linux
            - `FlightAlert` - GUI application
            - `FlightAlert-Console` - Console application
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
